DESC EMPLOYEES;
SELECT * FROM EMPLOYEES;

--1 EMPLOYEES 테이블에서 입사일자 순으로 정렬하여 사원번호, 이름, 업무, 급여, 입사일자, 부서번호
SELECT EMPLOYEE_ID AS 사원번호, JOB_ID AS 업무, SALARY AS 급여, HIRE_DATE AS 입사일자, DEPARTMENT_ID AS 부서번호
  FROM EMPLOYEES
  ORDER BY HIRE_DATE;
--2 EMPLOYEES 테이블에서 첫 번째 정렬은 부서번호로 두 번째 정렬은 업무로 세 번째 정렬은 급여가 많은 순으로 정렬
-- 사원번호, 성명, 입사일자, 부서번호, 업무, 급여
SELECT EMPLOYEE_ID AS 사원번호, CONCAT(CONCAT(FIRST_NAME,' '),LAST_NAME) AS 성명, HIRE_DATE AS 입사일자,
       DEPARTMENT_ID AS 부서번호, JOB_ID AS 업무, SALARY AS 급여
  FROM EMPLOYEES
  ORDER BY DEPARTMENT_ID, JOB_ID, SALARY DESC;
--3 모든 SALESMAN(SA_)에 대하여 급여의 평균, 최고액, 최저액, 합계
SELECT AVG(SALARY) AS 평균급여, MAX(SALARY) AS 최고액, MIN(SALARY) AS 최저액, SUM(SALARY) AS 합계
  FROM EMPLOYEES
  WHERE JOB_ID LIKE 'SA%';
--4 테이블에 등록되어 있는 인원수, 보너스가 NULL이 아닌 인원수, 보너스의 평균, 등록되어 있는 부서의 수
SELECT COUNT(EMPLOYEE_ID) AS 인원수, COUNT(COMMISSION_PCT) AS 보너스NOTNULL,
       AVG(COMMISSION_PCT) AS 보너스평균, COUNT(DISTINCT DEPARTMENT_ID) AS 부서수
  FROM EMPLOYEES;
--SELECT COUNT(*) FROM EMPLOYEES WHERE COMMISSION_PCT IS NOT NULL;
--SELECT SUM(COUNT(DISTINCT DEPARTMENT_ID)) FROM EMPLOYEES GROUP BY DEPARTMENT_ID;
--5 테이블에서 부서 인원이 4명 보다 많은 부서의 부서번호, 인원수, 급여의 합
SELECT DEPARTMENT_ID AS 부서번호, COUNT(*) AS 인원수, SUM(SALARY) AS 급여합계
  FROM EMPLOYEES
  GROUP BY DEPARTMENT_ID
  HAVING COUNT(*) > 4;
--6 업무별 급여의 평균이 10000 이상인 업무에 대하여 업무명, 평균급여, 급여의 합
SELECT JOB_ID AS 업무명, AVG(SALARY) AS 평균급여, SUM(SALARY) AS 급여합계
  FROM EMPLOYEES
  GROUP BY JOB_ID
  HAVING AVG(SALARY) >= 1000;
--7 전체 월급이 10000을 초과하는 각 업무에 대하여 업무와 월급여 합계
-- 단 판매원(SA_)은 제외하고 월급여 합계로 정렬(내림차순)
SELECT JOB_ID AS 업무, SUM(SALARY) AS 월급여합계
  FROM EMPLOYEES
  WHERE JOB_ID NOT LIKE 'SA%'
  GROUP BY JOB_ID
  HAVING SUM(SALARY) > 10000
  ORDER BY SUM(SALARY) DESC;

DESC DEPARTMENTS;
SELECT * FROM DEPARTMENTS;
--8 30번 부서에 속한 사원들의 이름, 직업, 부서명
SELECT CONCAT(CONCAT(E.FIRST_NAME,' '),E.LAST_NAME) AS 사원이름, E.JOB_ID AS 직업, D.DEPARTMENT_NAME AS 부서명
  FROM EMPLOYEES E JOIN DEPARTMENTS D ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
  WHERE D.DEPARTMENT_ID = 30;
--9 지역번호 2500 에서 근무하는 사원이름, 직업, 부서번호, 부서명
SELECT CONCAT(CONCAT(E.FIRST_NAME,' '),E.LAST_NAME) AS 사원이름, E.JOB_ID AS 직업,
       D.DEPARTMENT_ID AS 부서번호, D.DEPARTMENT_NAME AS 부서명
  FROM EMPLOYEES E JOIN DEPARTMENTS D ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
  WHERE D.LOCATION_ID = 2500;
--10 사원이름과 부서명, 월급을 출력하는데 월급이 3000 이상인 사원
SELECT CONCAT(CONCAT(E.FIRST_NAME,' '),E.LAST_NAME) AS 사원이름, D.DEPARTMENT_NAME AS 부서명, E.SALARY AS 월급
  FROM EMPLOYEES E JOIN DEPARTMENTS D ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
  WHERE E.SALARY >= 3000;
  
--11 TJ 이란 사원보다 늦게 입사한 사원의 이름과 입사일
SELECT CONCAT(CONCAT(FIRST_NAME,' '),LAST_NAME) AS 사원이름, HIRE_DATE AS 입사일
  FROM EMPLOYEES
  WHERE HIRE_DATE > (SELECT HIRE_DATE FROM EMPLOYEES WHERE FIRST_NAME = 'TJ');
--12 ACCOUNTING 부서 소속 사원의 이름과 입사일
SELECT CONCAT(CONCAT(FIRST_NAME,' '),LAST_NAME) AS 사원이름, HIRE_DATE AS 입사일
  FROM EMPLOYEES
  WHERE JOB_ID LIKE 'AC%';

--13 Kochhar의 급여보다 많은 사원의 정보를 사원번호, 이름, 담당업무, 급여
SELECT EMPLOYEE_ID AS 사원번호, CONCAT(CONCAT(FIRST_NAME,' '),LAST_NAME) AS 사원이름,
       JOB_ID AS 담당업무, SALARY AS 급여
  FROM EMPLOYEES
  WHERE SALARY > (SELECT SALARY FROM EMPLOYEES WHERE LAST_NAME = 'Kochhar');
--14 급여가 평균보다 적은 사원의 사원번호, 이름, 담당업무, 급여, 부서번호
SELECT EMPLOYEE_ID AS 사원번호, CONCAT(CONCAT(FIRST_NAME,' '),LAST_NAME) AS 사원이름,
       JOB_ID AS 담당업무, SALARY AS 급여, DEPARTMENT_ID AS 부서번호
  FROM EMPLOYEES
  WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES);
--15 100번 부서의 최소 급여보다 최소 급여가 많은 다른 모든 부서
SELECT DEPARTMENT_ID AS 부서번호 FROM EMPLOYEES
  GROUP BY DEPARTMENT_ID
  HAVING MIN(SALARY) > (SELECT MIN(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 100);
--16 업무가 SA_MAN인 사원의 정보를 이름, 업무, 부서명, 근무지
SELECT CONCAT(CONCAT(E.FIRST_NAME,' '),E.LAST_NAME) AS 사원이름, E.JOB_ID AS 업무,
       D.DEPARTMENT_NAME AS 부서명, D.LOCATION_ID AS 근무지
  FROM EMPLOYEES E JOIN DEPARTMENTS D ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
  WHERE E.JOB_ID = 'SA_MAN';
--17 가장 많은 사원을 갖는 MANAGER 의 사원번호
SELECT MANAGER_ID AS MGR사원번호 
  FROM EMPLOYEES
  GROUP BY MANAGER_ID
  HAVING COUNT(MANAGER_ID) IN (SELECT MAX(COUNT(*)) FROM EMPLOYEES GROUP BY MANAGER_ID);
--SELECT MANAGER_ID, COUNT(*) FROM EMPLOYEES GROUP BY MANAGER_ID;
--18 가장 많은 사원이 속해 있는 부서번호와 사원수
SELECT DEPARTMENT_ID AS 부서번호, COUNT(*) AS 사원수
  FROM EMPLOYEES
  GROUP BY DEPARTMENT_ID
  HAVING COUNT(*) IN (SELECT MAX(COUNT(*)) FROM EMPLOYEES GROUP BY DEPARTMENT_ID);
--19 사원번호가 123인 사원의 직업과 같고 사원번호가 192인 사원의 급여보다 많은 사원번호, 이름, 직업, 급여
SELECT EMPLOYEE_ID AS 사원번호, CONCAT(CONCAT(FIRST_NAME,' '),LAST_NAME) AS 사원이름,
       JOB_ID AS 직업, SALARY AS 급여
  FROM EMPLOYEES
  WHERE JOB_ID IN (SELECT JOB_ID FROM EMPLOYEES WHERE EMPLOYEE_ID=123)
    AND SALARY > (SELECT SALARY FROM EMPLOYEES WHERE EMPLOYEE_ID=192);
--20 직업별로 최소급여를 받는 사원의 정보를 사원번호, 이름, 업무, 부서명 (단 직업별로 내림차순 정렬)
SELECT E.EMPLOYEE_ID AS 사원번호, CONCAT(CONCAT(E.FIRST_NAME,' '),E.LAST_NAME) AS 사원이름,
       E.JOB_ID AS 업무, D.DEPARTMENT_NAME AS 부서명, E.SALARY
  FROM EMPLOYEES E JOIN DEPARTMENTS D ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
  WHERE (E.JOB_ID, E.SALARY) IN (SELECT JOB_ID, MIN(SALARY) FROM EMPLOYEES GROUP BY JOB_ID)
  ORDER BY E.JOB_ID DESC;
--SELECT MIN(SALARY),JOB_ID FROM EMPLOYEES GROUP BY JOB_ID ORDER BY JOB_ID DESC;
--21 50번 부서의 최소급여를 받는 사원보다 많은 급여를 받는 사원의 사원번호, 이름, 업무, 입사일자, 급여, 부서번호
-- 단 50번 부서는 제외
SELECT EMPLOYEE_ID AS 사원번호, CONCAT(CONCAT(FIRST_NAME,' '),LAST_NAME) AS 사원이름, JOB_ID AS 업무,
       HIRE_DATE AS 입사일자, SALARY AS 급여, DEPARTMENT_ID AS 부서번호
  FROM EMPLOYEES
  WHERE SALARY > (SELECT MIN(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID=50)
    AND DEPARTMENT_ID != 50;
--22 50번 부서의 최고급여를 받는 사람보다 많은 급여를 받는 사원의 사원번호, 이름, 업무, 입사일자, 급여, 부서번호
-- 단 50번 부서는 제외
SELECT EMPLOYEE_ID AS 사원번호, CONCAT(CONCAT(FIRST_NAME,' '),LAST_NAME) AS 사원이름, JOB_ID AS 업무,
       HIRE_DATE AS 입사일자, SALARY AS 급여, DEPARTMENT_ID AS 부서번호
  FROM EMPLOYEES
  WHERE SALARY > (SELECT MAX(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID=50)
    AND DEPARTMENT_ID != 50;
