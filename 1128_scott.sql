SET SERVEROUTPUT ON;
-- 저장 서브프로그램 - 프로시저
-- 파라미터를 사용하는 프로시저 - 모드(IN / OUT / IN OUT)
-- IN 모드 파라미터
CREATE OR REPLACE PROCEDURE PRO_PARAM_IN
(
  PARAM1 IN NUMBER,
  PARAM2 NUMBER,   -- IN 은 기본값이므로 생략 가능
  PARAM3 NUMBER := 3,
  PARAM4 NUMBER DEFAULT 4
)
IS

BEGIN
  DBMS_OUTPUT.PUT_LINE('PARAM1 : ' || PARAM1);
  DBMS_OUTPUT.PUT_LINE('PARAM2 : ' || PARAM2);
  DBMS_OUTPUT.PUT_LINE('PARAM3 : ' || PARAM3);
  DBMS_OUTPUT.PUT_LINE('PARAM4 : ' || PARAM4);
END;
/
-- 파리미터를 입력하여 프로시저 사용하기
EXECUTE PRO_PARAM_IN(1,2,9,8); -- 1, 2, 9, 8
EXECUTE PRO_PARAM_IN(1,2); -- 1, 2, 3, 4
EXECUTE PRO_PARAM_IN(1); -- 오류보고(PRO_PARAM_IN 호출 시 인수의 갯수나 유형이 잘못됨)

-- OUT 모드 파라미터
-- 정의하기
CREATE OR REPLACE PROCEDURE PRO_PARAM_OUT
(
  IN_EMPNO IN EMP.EMPNO%TYPE,
  OUT_ENAME OUT EMP.ENAME%TYPE,
  OUT_SAL OUT EMP.SAL%TYPE
)
IS

BEGIN
  SELECT ENAME, SAL INTO OUT_ENAME, OUT_SAL
    FROM EMP
    WHERE EMPNO = IN_EMPNO;
END PRO_PARAM_OUT;
/
-- 사용하기
DECLARE
 V_ENAME EMP.ENAME%TYPE;
 V_SAL EMP.SAL%TYPE;
BEGIN
 PRO_PARAM_OUT(7788, V_ENAME, V_SAL); -- IN_EMPNO(7788), OUT_ENAME(V_ENAME), OUT_SAL(V_SAL)
 DBMS_OUTPUT.PUT_LINE('ENAME : ' || V_ENAME);
 DBMS_OUTPUT.PUT_LINE('SAL : ' || V_SAL);
END;
/

-- IN OUT 모드 파라미터
-- 정의하기
CREATE OR REPLACE PROCEDURE PRO_PARAM_INOUT
(
  INOUT_NO IN OUT NUMBER
)
IS

BEGIN
  INOUT_NO := INOUT_NO * 2;
END PRO_PARAM_INOUT;
/
-- 사용하기
DECLARE
  NO NUMBER;
BEGIN
  NO := 5;
  PRO_PARAM_INOUT(NO);
  DBMS_OUTPUT.PUT_LINE('NO : ' || NO);
END;
/

-- 프로시저 오류 정보 확인
CREATE OR REPLACE PROCEDURE PRO_ERR
IS
 ERR_NO NUMBER;
BEGIN
 ERR_NO = 100; -- 오류있는 프로시저 생성
 DBMS_OUTPUT.PUT_LINE('ERR_NO : ' || ERR_NO);
END PRO_ERR;
/
-- SHOW ERRORS 명령어로 오류 확인하기
-- SHOW ERRORS == SHOW ERR
SHOW ERR PROCEDURE PRO_ERR; -- 오류 (':=')


-- 실습
CREATE TABLE TBL_STUDENTS
(ID VARCHAR2(10), NAME VARCHAR2(40), TEL VARCHAR2(20), ADDR VARCHAR2(100));
CREATE TABLE TBL_IDPW
(ID VARCHAR2(10), PW VARCHAR2(20), CONSTRAINT INPW_ID_PK PRIMARY KEY(ID));
INSERT INTO TBL_STUDENTS (ID, NAME,TEL, ADDR) VALUES ('SUPERMAN','홍길동', '010-1111-1111','대구시 달서구');
INSERT INTO TBL_IDPW (ID, PW) VALUES ('SUPERMAN','1234');
SELECT * FROM TBL_STUDENTS;
SELECT * FROM TBL_IDPW;
-- PROCEDURE
CREATE OR REPLACE PROCEDURE PRC_STUDENTS_INSERT
(  V_ID IN TBL_STUDENTS.ID%TYPE,
   V_PW IN TBL_IDPW.PW%TYPE,
   V_NAME IN TBL_STUDENTS.NAME%TYPE,
   V_TEL IN TBL_STUDENTS.TEL%TYPE,
   V_ADDR IN TBL_STUDENTS.ADDR%TYPE
)
IS
BEGIN
  INSERT INTO TBL_IDPW(ID, PW) VALUES(V_ID, V_PW);
  INSERT INTO TBL_STUDENTS(ID, NAME, TEL, ADDR) VALUES(V_ID,V_NAME,V_TEL,V_ADDR);
  COMMIT;
END;
/
EXEC PRC_STUDENTS_INSERT ('HAPPYDAY','1234','김길동','010-2222-2222','대구시 남구');
SELECT * FROM TBL_STUDENTS;
SELECT * FROM TBL_IDPW;
-- 실습 2
CREATE TABLE TBL_SUNGJUK
( HAKBUN NUMBER, NAME VARCHAR2(40), KOR NUMBER(3), ENG NUMBER(3), MAT NUMBER(3),
  CONSTRAINT SUNGJUK_HAKBUN_PK PRIMARY KEY(HAKBUN)
  );
CREATE OR REPLACE PROCEDURE PRC_SUNGJUK_INSERT
(  V_HAKBUN IN TBL_SUNGJUK.HAKBUN%TYPE,
   V_NAME IN TBL_SUNGJUK.NAME%TYPE,
   V_KOR IN TBL_SUNGJUK.KOR%TYPE,
   V_ENG IN TBL_SUNGJUK.ENG%TYPE,
   V_MAT IN TBL_SUNGJUK.MAT%TYPE
)
IS
BEGIN
  INSERT INTO TBL_SUNGJUK(HAKBUN,NAME,KOR,ENG,MAT) VALUES(V_HAKBUN,V_NAME,V_KOR,V_ENG,V_MAT);
  COMMIT;
END;
/
EXEC PRC_SUNGJUK_INSERT (1,'홍길동',90,80,70);
SELECT * FROM TBL_SUNGJUK;
-- 수정 (컬럼 추가)
ALTER TABLE TBL_SUNGJUK ADD(TOT NUMBER(3), AVG NUMBER(4,1), GRADE CHAR);
-- 등급 A(90점이상), B(80점이상), C(70점이상), D(60점이상), F(60점미만)
CREATE OR REPLACE PROCEDURE PRC_SUNGJUK_INSERT
( V_HAKBUN IN TBL_SUNGJUK.HAKBUN%TYPE,
  V_NAME IN TBL_SUNGJUK.NAME%TYPE,
  V_KOR IN TBL_SUNGJUK.KOR%TYPE,
  V_ENG IN TBL_SUNGJUK.ENG%TYPE,
  V_MAT IN TBL_SUNGJUK.MAT%TYPE
)
IS
  V_TOT NUMBER; --IN TBL_SUNGJUK.TOT%TYPE;
  V_AVG NUMBER; --IN TBL_SUNGJUK.AVG%TYPE;
  V_GRADE CHAR; --IN TBL_SUNGJUK.GRADE%TYPE;
BEGIN
  V_TOT := V_KOR+V_ENG+V_MAT;
  V_AVG := (V_TOT)/3;
  V_GRADE := CASE TRUNC(V_AVG,-1)
               WHEN 100 THEN 'A'
               WHEN 90 THEN 'A'
               WHEN 80 THEN 'B'
               WHEN 70 THEN 'C'
               WHEN 60 THEN 'D'
               ELSE 'F'
            END;
  INSERT INTO TBL_SUNGJUK (HAKBUN,NAME,KOR,ENG,MAT,TOT,AVG,GRADE)
    VALUES(V_HAKBUN,V_NAME,V_KOR,V_ENG,V_MAT,V_TOT,V_AVG,V_GRADE);
END;
/
EXEC PRC_SUNGJUK_INSERT (2,'김길동',90,90,60);
SELECT * FROM TBL_SUNGJUK;