-- 온라인 마켓 테이블
-- 상품 테이블 : PRODUCT
-- 상품번호(PID), 상품명(PNAME), 상품가격(PPRICE), 상품설명(PCOMMENT)
CREATE TABLE PRODUCT (
  PID NUMBER(10),
  PNAME VARCHAR2(20),
  PPRICE NUMBER(20),
  PCOMMENT VARCHAR2(80)
  );
-- 소비자 테이블 : CONSUMER
-- 소비자 ID(CONSUMERID), 이름(CONSUMERNAME), 나이(CONSUMERAGE)
CREATE TABLE CONSUMER(
  CONSUMERID VARCHAR2(30),
  CONSUMERNAME VARCHAR2(20),
  CONSUMERAGE NUMBER(3)
  );
-- 장바구니 테이블 : CART
-- 장바구니 번호(CARTID), 소비자 ID(CONSUMERID), 상품번호(PID), 수량(CONSURYANG)  
CREATE TABLE CART (
  CARTID NUMBER(10),
  CONSUMERID VARCHAR2(30),
  PID NUMBER(10),
  CONSURYANG NUMBER(10)
  );
  
  
-- 트랜잭션 제어(TCL)
CREATE TABLE DEPT_TCL AS SELECT * FROM DEPT;
SELECT * FROM DEPT_TCL;
-- DML(데이터조작어) (하나의 트랜젝션 단위로 묶임)
INSERT INTO DEPT_TCL VALUES (50, 'DATABASE', 'SEOUL');
UPDATE DEPT_TCL SET LOC = 'BUSAN' WHERE DEPTNO = 40;
DELETE FROM DEPT_TCL WHERE DNAME = 'RESEARCH';
SELECT * FROM DEPT_TCL;
-- 트랜젝션 취소 ROLLBACK
ROLLBACK;
-- 트랜젝션 영구히 반영 COMMIT -> ROLLBACK 불가
COMMIT;

-- 세션
SELECT * FROM DEPT_TCL;
DELETE FROM DEPT_TCL WHERE DEPTNO=50;
COMMIT; -- COMMIT해야 SQL PLUS에 반영(CMD-SQL>)

-- LOCK (수정 중인 데이터 접근을 막음)
UPDATE DEPT_TCL SET LOC = 'SEOUL' WHERE DEPTNO=30;
SELECT * FROM DEPT_TCL;
COMMIT;
SELECT * FROM DEPT_TCL;

-- Q1
CREATE TABLE DEPT_HW AS SELECT * FROM DEPT;
SELECT * FROM DEPT_HW;
UPDATE DEPT_HW SET DNAME='DATABASE', LOC='SEOUL' WHERE DEPTNO =30;
ROLLBACK;


-- 데이터 사전(DD; DATA DICTIONARY)
SELECT * FROM DICT;
SELECT * FROM DICTIONARY;
-- USER_접두어 가진 데이터 사전
SELECT * FROM USER_TABLES;
SELECT TABLE_NAME FROM USER_TABLES;
-- ALL_접두어 가진 데이터 사전
SELECT OWNER, TABLE_NAME FROM ALL_TABLES;
-- DBA_접두어 가진 데이터 사전
SELECT * FROM DBA_TABLES; -- 관리자만 조회가 가능하므로 SCOTT 계정은 조회 불가


-- 실습
-- 부서번호가 10 이면 A, 20이면 B, 30이면 C, 40 이면 D로 조회 (부서번호 오름차순 정렬)
SELECT DEPTNO AS 부서번호,
  CASE DEPTNO
   WHEN 10 THEN 'A'
   WHEN 20 THEN 'B'
   WHEN 30 THEN 'C'
   WHEN 40 THEN 'D'
 --ELSE 'D'
  END AS 부서별칭
  FROM EMP
  ORDER BY DEPTNO;
-- 부서번호가 10 이면 A, 20이면 B 로 조회 (부서번호 오름차순 정렬)
SELECT DEPTNO AS 부서번호,
  CASE DEPTNO
    WHEN 10 THEN 'A'
    WHEN 20 THEN 'B'
  END AS 부서별칭
  FROM EMP
  WHERE DEPTNO IN (10, 20)
  ORDER BY DEPTNO;
-- 10번 부서 직원 중 1982년에 입사한 직원의 사원번호, 사원이름, 부서번호, 입사일
SELECT EMPNO AS 사원번호, ENAME AS 사원이름, DEPTNO AS 부서번호, HIREDATE AS 입사일
  FROM EMP
  --WHERE DEPTNO =10 AND HIREDATE LIKE '1982%';
  WHERE DEPTNO = 10 AND TO_CHAR(HIREDATE, 'YYYY')='1982';
-- EMP테이블에서 9월에 입사한 사원의 사원번호, 사원이름, 부서번호, 입사일
SELECT EMPNO AS 사원번호, ENAME AS 사원이름, DEPTNO AS 부서번호, HIREDATE AS 입사일
  FROM EMP
  WHERE TO_CHAR(HIREDATE,'MM')='09';
--SELECT HIREDATE, TO_CHAR(HIREDATE,'YYYY') FROM EMP;
SELECT * FROM EMP;
-- EMP 테이블에서 가장 많은 부하직원을 갖는 MGR 사원번호
SELECT MGR, COUNT(MGR) FROM EMP GROUP BY MGR;
SELECT MAX(COUNT(MGR))FROM EMP GROUP BY MGR;
SELECT MGR AS MGR사원번호 FROM EMP
  GROUP BY MGR
  --HAVING COUNT(MGR) =(SELECT MAX(COUNT(MGR))FROM EMP GROUP BY MGR);
  HAVING COUNT(MGR)= (SELECT MAX(COUNT(*)) FROM EMP GROUP BY MGR);
