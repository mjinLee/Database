-- PL/SQL
SET SERVEROUTPUT ON; -- 실행결과 출력
-- 조건문
-- IF-THEN-ELSIF
DECLARE
 V_SCORE NUMBER := 67;
BEGIN
 IF V_SCORE >= 90 THEN
  DBMS_OUTPUT.PUT_LINE('A학점');
 ELSIF V_SCORE >= 80 THEN
  DBMS_OUTPUT.PUT_LINE('B학점');
 ELSIF V_SCORE >= 70 THEN
  DBMS_OUTPUT.PUT_LINE('C학점');
 ELSIF V_SCORE >= 60 THEN
  DBMS_OUTPUT.PUT_LINE('D학점');
 ELSE
  DBMS_OUTPUT.PUT_LINE('F학점');
 END IF;
END;
/

-- CASE
-- 단순 CASE
DECLARE
 V_SCORE NUMBER := 77;
BEGIN
 CASE TRUNC(V_SCORE/10)
  WHEN 10 THEN DBMS_OUTPUT.PUT_LINE('A학점');
  WHEN 9 THEN DBMS_OUTPUT.PUT_LINE('A학점');
  WHEN 8 THEN DBMS_OUTPUT.PUT_LINE('B학점');
  WHEN 7 THEN DBMS_OUTPUT.PUT_LINE('C학점');
  WHEN 6 THEN DBMS_OUTPUT.PUT_LINE('D학점');
  ELSE DBMS_OUTPUT.PUT_LINE('F학점');
 END CASE;
END;
/ 
-- 검색 CASE
DECLARE
 V_SCORE NUMBER := 87;
BEGIN
 CASE
  WHEN V_SCORE >= 90 THEN DBMS_OUTPUT.PUT_LINE('A학점');
  WHEN V_SCORE >= 80 THEN DBMS_OUTPUT.PUT_LINE('B학점');
  WHEN V_SCORE >= 70 THEN DBMS_OUTPUT.PUT_LINE('C학점');
  WHEN V_SCORE >= 60 THEN DBMS_OUTPUT.PUT_LINE('D학점');
  ELSE DBMS_OUTPUT.PUT_LINE('F학점');
 END CASE;
END;
/

-- 반복 제어문
-- 기본 LOOP
DECLARE
 V_NUM NUMBER := 0;
BEGIN
 LOOP
  DBMS_OUTPUT.PUT_LINE('현재 V_NUM : ' || V_NUM);
  V_NUM := V_NUM + 1;
  EXIT WHEN V_NUM > 4;
 END LOOP;
END;
/
DECLARE
 V_NUM NUMBER := 0;
BEGIN
 LOOP
  DBMS_OUTPUT.PUT_LINE('현재 V_NUM : ' || V_NUM);
  V_NUM := V_NUM + 2;
  IF V_NUM > 4 THEN
    EXIT; -- 반복문 종료
  END IF;
 END LOOP;
END;
/
-- WHILE LOOP
DECLARE
 V_NUM NUMBER :=0;
BEGIN
 WHILE V_NUM < 5 LOOP
  DBMS_OUTPUT.PUT_LINE('현재 V_NUM : ' || V_NUM);
  V_NUM := V_NUM + 1;
 END LOOP;
END;
/ 
-- FOR LOOP
DECLARE
 V_NUM NUMBER := 0;
BEGIN
 FOR i IN 0..4 LOOP -- i(counter) / 0 ~ 4까지 총 다섯 번 반복
  DBMS_OUTPUT.PUT_LINE('V_NUM 값 : ' || V_NUM);
  --DBMS_OUTPUT.PUT_LINE('현재 i의 값 : ' || i);
  V_NUM := i;
  V_NUM := V_NUM + 1;
  --DBMS_OUTPUT.PUT_LINE('V_NUM 값 : ' || V_NUM);
 END LOOP;
END;
/
-- CONTINUE, CONTINUE-WHEN
BEGIN
 FOR i IN 0..4 LOOP 
  --CONTINUE WHEN MOD(i,2) = 1; -- i 값이 짝수일 때만 출력
  CONTINUE WHEN MOD(i,2) = 0; -- i 값이 홀수일 때만 출력
  DBMS_OUTPUT.PUT_LINE('현재 i의 값 : ' || i);
 END LOOP;
END;
/

-- Q1
BEGIN
 FOR i IN 1..10 LOOP
  CONTINUE WHEN MOD(i,2) = 0;
  DBMS_OUTPUT.PUT_LINE('현재 i의 값 : ' || i);
 END LOOP;
END;
/
-- Q2
DECLARE
 V_DEPTNO DEPT.DEPTNO%TYPE := 10;
BEGIN
 CASE V_DEPTNO
  WHEN 10 THEN DBMS_OUTPUT.PUT_LINE('DNAME : ACCOUNTING');
  WHEN 20 THEN DBMS_OUTPUT.PUT_LINE('DNAME : RESEARCH');
  WHEN 30 THEN DBMS_OUTPUT.PUT_LINE('DNAME : SALES');
  WHEN 40 THEN DBMS_OUTPUT.PUT_LINE('DNAME : OPERATIONS');
  ELSE DBMS_OUTPUT.PUT_LINE('DNAME : N/A');
 END CASE;
END;
/

--
DECLARE
 RESULT NUMBER;
BEGIN
 FOR i IN 1..10 LOOP
  RESULT := i*2;
  DBMS_OUTPUT.PUT_LINE(RESULT);
 END LOOP;
END;
/
--
DECLARE
 RESULT NUMBER;
 i NUMBER;
BEGIN
 i := 1;
 WHILE i <= 10 LOOP
  RESULT := i * 3;
  DBMS_OUTPUT.PUT_LINE(i || ' * 3 => ' || RESULT);
  i := i + 1;
 END LOOP;
END;
/

-- 레코드와 컬렉션
-- 레코드
DECLARE
 TYPE REC_DEPT IS RECORD(
   DEPTNO NUMBER(2) NOT NULL := 99,
   DNAME DEPT.DNAME%TYPE,
   LOC DEPT.LOC%TYPE
   );
   DEPT_REC REC_DEPT;
BEGIN
 DEPT_REC.DEPTNO := 90;
 DEPT_REC.DNAME := 'DATABASE';
 DEPT_REC.LOC := 'SEOUL';
 DBMS_OUTPUT.PUT_LINE('DEPTNO : ' || DEPT_REC.DEPTNO);
 DBMS_OUTPUT.PUT_LINE('DNAME : ' || DEPT_REC.DNAME);
 DBMS_OUTPUT.PUT_LINE('LOC : ' || DEPT_REC.LOC);
END;
/
-- 레코드를 사용한 INSERT
CREATE TABLE DEPT_RECORD AS SELECT * FROM DEPT;
SELECT * FROM DEPT_RECORD;
DECLARE
 TYPE REC_DEPT IS RECORD(
   DEPTNO NUMBER(2) NOT NULL := 99,
   DNAME DEPT.DNAME%TYPE,
   LOC DEPT.LOC%TYPE
   );
   DEPT_REC REC_DEPT;
BEGIN
 DEPT_REC.DEPTNO := 90;
 DEPT_REC.DNAME := 'DATABASE';
 DEPT_REC.LOC := 'SEOUL';
 
 INSERT INTO DEPT_RECORD VALUES DEPT_REC;
END;
/
SELECT * FROM DEPT_RECORD;
-- 레코드를 사용한 UPDATE
DECLARE
 TYPE REC_DEPT IS RECORD(
   DEPTNO NUMBER(2) NOT NULL := 99,
   DNAME DEPT.DNAME%TYPE,
   LOC DEPT.LOC%TYPE
   );
   DEPT_REC REC_DEPT;
BEGIN
 DEPT_REC.DEPTNO := 50;
 DEPT_REC.DNAME := 'DB';
 DEPT_REC.LOC := 'SEOUL';
 
 UPDATE DEPT_RECORD SET ROW = DEPT_REC WHERE DEPTNO=90;
END;
/
SELECT * FROM DEPT_RECORD;

-- Q1
CREATE TABLE EMP_RECORD AS SELECT * FROM EMP WHERE 1 <> 1;
SELECT * FROM EMP_RECORD;
DECLARE
 TYPE REC_EMP IS RECORD (
  EMPNO EMP.EMPNO%TYPE NOT NULL := 9999, ENAME EMP.ENAME%TYPE, JOB EMP.JOB%TYPE,
  MGR EMP.MGR%TYPE, HIREDATE EMP.HIREDATE%TYPE, SAL EMP.SAL%TYPE, COMM EMP.COMM%TYPE, DEPTNO EMP.DEPTNO%TYPE
  );
  EMP_REC REC_EMP;
BEGIN
  EMP_REC.EMPNO := 1111;
  EMP_REC.ENAME := 'TEST_USER';
  EMP_REC.JOB := 'TEST_JOB';
  EMP_REC.MGR := NULL;
  EMP_REC.HIREDATE := TO_DATE('20180301','YY/MM/DD');
  EMP_REC.SAL := 3000;
  EMP_REC.COMM := NULL;
  EMP_REC.DEPTNO := 40;
  INSERT INTO EMP_RECORD VALUES EMP_REC;
END;
/
SELECT * FROM EMP_RECORD;

-- 컬렉션
-- 연관 배열
DECLARE
 TYPE ITAB_EX IS TABLE OF VARCHAR2(20) INDEX BY PLS_INTEGER;
 TEXT_ARR ITAB_EX;
BEGIN
 TEXT_ARR(1) := '1ST DATA';
 TEXT_ARR(2) := '2ND DATA';
 TEXT_ARR(3) := '3RD DATA';
 TEXT_ARR(4) := '4TH DATA';
 DBMS_OUTPUT.PUT_LINE('TEXT_ARR(1) : ' || TEXT_ARR(1));
 DBMS_OUTPUT.PUT_LINE('TEXT_ARR(2) : ' || TEXT_ARR(2));
 DBMS_OUTPUT.PUT_LINE('TEXT_ARR(3) : ' || TEXT_ARR(3));
 DBMS_OUTPUT.PUT_LINE('TEXT_ARR(4) : ' || TEXT_ARR(4));
END;
/

-- Q2
DECLARE
 TYPE ITAB_EMP IS TABLE OF EMP%ROWTYPE INDEX BY PLS_INTEGER;
 EMP_ARR ITAB_EMP;
 IDX PLS_INTEGER := 0;
BEGIN
 FOR i IN (SELECT * FROM EMP) LOOP
  IDX := IDX + 1;
  EMP_ARR(IDX).EMPNO := i.EMPNO;
  EMP_ARR(IDX).ENAME := i.ENAME;
  EMP_ARR(IDX).JOB := i.JOB;
  EMP_ARR(IDX).MGR := i.MGR;
  EMP_ARR(IDX).HIREDATE := i.HIREDATE;
  EMP_ARR(IDX).SAL := i.SAL;
  EMP_ARR(IDX).COMM := i.COMM;
  EMP_ARR(IDX).DEPTNO := i.DEPTNO;
  DBMS_OUTPUT.PUT_LINE(
    EMP_ARR(IDX).EMPNO || ' : ' || EMP_ARR(IDX).ENAME || ' : ' ||
    EMP_ARR(IDX).JOB || ' : ' || EMP_ARR(IDX).MGR || ' : ' || 
    EMP_ARR(IDX).HIREDATE || ' : ' ||  EMP_ARR(IDX).SAL || ' : ' || 
    EMP_ARR(IDX).COMM || ' : ' || EMP_ARR(IDX).DEPTNO);  
 END LOOP;
END;
/
